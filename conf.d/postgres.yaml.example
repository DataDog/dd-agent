init_config:

instances:
  - host: localhost
    port: 5432
#    username: my_username
#    password: my_password
#    dbname: db_name
#    ssl: False
#    use_psycopg2: False # Force using psycogp2 instead of pg8000 to connect. WARNING: psycopg2 doesn't support ssl mode.
#    tags:
#      - optional_tag1
#      - optional_tag2

# Connect using a UNIX socket (host must begin with a /)
# If `use_psycopg2` is enabled, use the directory containing the UNIX socket (ex: `/run/postgresql/`)
# otherwise, use the full path to the socket file (ex: `/run/postgresql/.s.PGSQL.5433`).
#  - host: /run/postgresql/.s.PGSQL.5433
#    dbname: db_name

# Track per-relation (table) metrics
# The list of relations/tables must be specified here.
# Each relation generates many metrics (10 + 10 per index)
#
#    relations:
#      - my_table
#      - my_other_table
#
# By default all schemas are included. To track relations from specific schemas only,
# use the following syntax:
#
#    relations:
#      - relation_name: another_table
#        schemas:
#          - public
#          - prod
#


# Custom metrics
# Below are some examples of commonly used metrics, which are implemented as custom metrics.
# Uncomment them if you want to use them as is, or use as an example for creating your own custom metrics.
# The format for describing custome metrics is identical with the one used for common metrics in postgres.py
# Be extra careful with ensuring proper custom metrics description format. If your custom metric does not work
# after an agent restart, look for errors in the output of "/etc/init.d/datadog-agent info" command, as well as
# /var/log/datadog/collector.log file.
#
#    custom_metrics:
#    - # Londiste 3 replication lag
#      descriptors:
#        - [consumer_name, consumer_name]
#      metrics:
#         GREATEST(0, EXTRACT(EPOCH FROM lag)) as lag: [postgresql.londiste_lag, GAUGE]
#         GREATEST(0, EXTRACT(EPOCH FROM lag)) as last_seen: [postgresql.londiste_last_seen, GAUGE]
#         pending_events: [postgresql.londiste_pending_events, GAUGE]
#      query: SELECT consumer_name, %s from pgq.get_consumer_info() where consumer_name !~ 'watermark$';
#      relation: false

#    Collect metrics regarding PL/pgSQL functions from pg_stat_user_functions
#    collect_function_metrics: False
#

#    Collect count metrics, default value is True for backward compatibility but they might be slow,
#    suggested value is False.
#    collect_count_metrics: False
#

#    Collect database size metrics. Default value is True but they might be slow with large databases
#    collect_database_size_metrics: False
#
