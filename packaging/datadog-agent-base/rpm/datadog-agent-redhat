#!/bin/sh
###############################################################################
# datadog-agent
#
# Inspired by Boxed Ice <hello@boxedice.com>
# Forked by Datadog, Inc. <package@datadoghq.com>
#
# Licensed under Simplified BSD License (see LICENSE)
#
###############################################################################
#
# chkconfig: 345 85 15
# description: Datadog Monitoring Agent

### BEGIN INIT INFO
# Provides: datadog-agent
# Short-Description: Start and start datadog-agent
# Description: datadog-agent is the monitoring agent component for Datadog
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
### END INIT INFO

AGENTPATH="/usr/share/datadog/agent/agent.py"
AGENTUSER="dd-agent"
PIDPATH="/var/run/dd-agent/"
USE_SUPERVISOR="/usr/bin/dd-forwarder"
SUPERVISOR_CONF="/etc/dd-agent/supervisor.conf"

if [ -x "/usr/bin/python2.6" ]; then
    PYTHON="/usr/bin/python2.6"
else
    PYTHON="/usr/bin/python"
fi

# Source function library.
. /etc/rc.d/init.d/functions

PROG="datadog-agent"
PIDFILE=$PIDPATH/$PROG.pid
SUPERVISOR_PIDFILE=/var/run/datadog-supervisord.pid
LOCKFILE=/var/lock/subsys/$PROG

check_status() {
    # run checks to determine if the service is running or use generic status
    if [ -f $USE_SUPERVISOR ]; then

        # if the sock exists, we can use supervisorctl
        if [ -e /var/tmp/datadog-supervisor.sock ]; then

            s=`supervisorctl -c $SUPERVISOR_CONF status`

            # number of RUNNING supervisord programs
            p=`echo "$s" | grep -c RUNNING`

            # number of expected running supervisord programs
            c=`grep -c '\[program:' $SUPERVISOR_CONF`
            if [ "$p" -ne "$c" ]; then
                echo "$s"
                echo -n "Datadog agent (supervisor) is NOT running all child processes" && failure && echo
                return 1
            else
                echo -n "Datadog agent (supervisor) is running all child processes" && success && echo 
                return 0
            fi
        else

            # if no sock, use the rc status function
            status -p $SUPERVISOR_PIDFILE $PROG
            RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                echo -n "Datadog agent (supervisor) is running." && success && echo 
            else
                echo -n "Datadog agent (supervisor) is NOT running." && failure && echo
            fi
            return $RETVAL
        fi
    fi
            
    if [ -f "$LOCKFILE" ]; then
        echo -n 'Datadog agent is running'  && success && echo
        return 0
    else
        echo -n 'Datadog agent is NOT running' && failure && echo
        return 1
    fi
}

grab_status() {
    GRABSTATUS=`check_status &>/dev/null`
}

start() {
    if [ -f $USE_SUPERVISOR ]; then
        # no need to test for status before daemon,
        # the daemon function does the right thing
        echo -n "Starting Datadog agent (using supervisord):"
        daemon --pidfile=$SUPERVISOR_PIDFILE supervisord -c $SUPERVISOR_CONF
        echo
        SLEEP=7
        echo Waiting $SLEEP seconds to test for running child processes...
        sleep $SLEEP
        check_status
        if [ "$?" -eq "1" ]; then
            stop
        else
            touch $LOCKFILE
        fi  
        
        echo
        return 1
    else
        grab_status
        if [ "$?" -eq "0" ]; then
            echo -n 'Datadog agent is already running' && warning && echo
            return
        fi
        echo -n 'Starting Datadog agent: '
        install -d -o $AGENTUSER $PIDPATH
        daemon --user $AGENTUSER "env LANG=POSIX $PYTHON $AGENTPATH start init --clean >/dev/null"
        RETURNVALUE=$?
        echo
        [ $RETURNVALUE -eq 0 ] && touch $LOCKFILE
        return $RETURNVALUE
    fi
}

stop() {
    if [ -f $USE_SUPERVISOR ]; then
        # no need to test for status before killproc,
        # it does the right thing. and testing supervisorctl status
        # before killproc can lead to states where you cannot stop!
        echo -n 'Stopping Datadog agent (using killproc on supervisord): '
        killproc -p $SUPERVISOR_PIDFILE
        rm -f $LOCKFILE
        echo
        RETURNVALUE=0
    else
        grab_status
        if [ "$?" -eq "1" ]; then
            echo -n 'Datadog agent is NOT running' && warning && echo
            return
        fi
        echo -n 'Stopping Datadog agent: '
        daemon --user $AGENTUSER "$PYTHON $AGENTPATH stop >/dev/null"
        RETURNVALUE=$?
        [ "$RETURNVALUE" -eq "0" ] && rm -f $LOCKFILE && rm -f $PIDFILE
    fi
    return $RETURNVALUE
}

restart() {
    stop
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        check_status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 2
esac
exit $?
